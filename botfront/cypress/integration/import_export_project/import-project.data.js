export const resultingEndpoints = '# This file contains the different endpoints your bot can use.# Server where the models are pulled from.# https://rasa.com/docs/rasa/user-guide/running-the-server/#fetching-models-from-a-server/#models:#  url: http://my-server.com/models/default_core@latest#  wait_time_between_pulls:  10   # [optional](default: 100)# Server which runs your custom actions.# https://rasa.com/docs/rasa/core/actions/#custom-actions/action_endpoint: url: "http://localhost:5055/webhook"# Tracker store which is used to store the conversations.# By default the conversations are stored in memory.# https://rasa.com/docs/rasa/api/tracker-stores/#tracker_store:#    type: redis#    url: <host of the redis instance, e.g. localhost>#    port: <port of your redis instance, usually 6379>#    db: <number of your database within redis, e.g. 0>#    password: <password used for authentication>#    use_ssl: <whether or not the communication is encrypted, default false>#tracker_store:#    type: mongod#    url: <url to your mongo instance, e.g. mongodb://localhost:27017>#    db: <name of the db within your mongo instance, e.g. rasa>#    username: <username used for authentication>#    password: <password used for authentication># Event broker which all conversation events should be streamed to.# https://rasa.com/docs/rasa/api/event-brokers/#event_broker:#  url: localhost#  username: username#  password: password#  queue: queue';
export const resultingCredentials = 'rasa_addons.core.channels.webchat.WebchatInputTest:  session_persistence: true  base_url: \'http://localhost:5005\'  socket_path: /socket.io/';
export const resultingDefaultDomain = 'slots:  test_message_a:    type: unfeaturized  test_message_b:    type: unfeaturizedresponses: {}forms:  open_incident_form:    email:      - type: from_entity        entity: email      - type: from_intent        intent: affirm        value: true      - type: from_intent        intent: deny        value: false    priority:      - type: from_entity        entity: priority    problem_description:      - type: from_text        not_intent:          - incident_status          - bot_challenge          - help          - affirm          - deny    incident_title:      - type: from_trigger_intent        intent: password_reset        value: Problem resetting password      - type: from_trigger_intent        intent: problem_email        value: Problem with email      - type: from_text        not_intent:          - incident_status          - bot_challenge          - help          - affirm          - deny    confirm:      - type: from_intent        intent: affirm        value: true      - type: from_intent        intent: deny        value: false  incident_status_form:    email:      - type: from_entity        entity: email      - type: from_intent        intent: affirm        value: true      - type: from_intent        intent: deny        value: falseactions:  - action_aaa  - action_ask_email  - validate_open_incident_form  - validate_incident_status_form';
